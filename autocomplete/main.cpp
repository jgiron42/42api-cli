#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <set>

#include <string>
#include <iostream>

char array[710][100] =

{"project_sessions/:project_session_id/attachments",
 "projects/:project_id/attachments",
 "attachments",
 "project_sessions/:project_session_id/attachments/:id",
 "attachments/:id",
 "accreditations",
 "accreditations/:id",
 "achievements",
 "cursus/:cursus_id/achievements",
 "campus/:campus_id/achievements",
 "titles/:title_id/achievements",
 "achievements/:id",
 "achievements/:achievement_id/achievements_users",
 "achievements_users",
 "achievements_users/:id",
 "announcements/graph(/on/:field(/by/:interval))",
 "announcements/:id",
 "announcements",
 "cursus/:cursus_id/announcements",
 "anti_grav_units",
 "anti_grav_units/:id",
 "anti_grav_units_users",
 "users/:user_id/anti_grav_units_users",
 "campus/:campus_id/anti_grav_units_users",
 "anti_grav_units_users/:id",
 "apps",
 "users/:user_id/apps",
 "apps/:id",
 "balances",
 "pools/:pool_id/balances",
 "balances/:id",
 "pools/:pool_id/balances/:id",
 "bloc_deadlines",
 "blocs/:bloc_id/bloc_deadlines",
 "bloc_deadlines/:id",
 "blocs",
 "blocs/:id",
 "campus/:campus_id/broadcasts",
 "campus",
 "campus/:id",
 "campus/:campus_id/stats",
 "campus/journal",
 "campus_users",
 "users/:user_id/campus_users",
 "campus_users/:id",
 "certificates",
 "certificates/:id",
 "certificates_users",
 "certificates/:certificate_id/certificates_users",
 "users/:user_id/certificates_users",
 "certificates_users/:id",
 "closes",
 "users/:user_id/closes",
 "closes/:id",
 "closes/:id/unclose",
 "closes/:id/close",
 "coalitions",
 "users/:user_id/coalitions",
 "blocs/:bloc_id/coalitions",
 "coalitions/:id",
 "coalitions/:coalition_id/coalitions_users",
 "coalitions_users",
 "users/:user_id/coalitions_users",
 "coalitions_users/:id",
 "products/:product_id/commands",
 "campus/:campus_id/products/:product_id/commands",
 "community_services/graph(/on/:field(/by/:interval))",
 "closes/:close_id/community_services",
 "community_services",
 "community_services/:id",
 "community_services/:id/validate",
 "community_services/:id/invalidate",
 "companies",
 "companies/:id",
 "companies/:company_id/subscribed_users",
 "companies/:company_id/internships_users",
 "users/:user_id/correction_point_historics",
 "cursus",
 "cursus/:id",
 "cursus_users/graph(/on/:field(/by/:interval))",
 "cursus_users",
 "users/:user_id/cursus_users",
 "cursus/:cursus_id/cursus_users",
 "cursus_users/:id",
 "dashes/graph(/on/:field(/by/:interval))",
 "dashes",
 "dashes/:id",
 "dashes_users/graph(/on/:field(/by/:interval))",
 "dashes_users",
 "dashes/:dash_id/dashes_users",
 "dashes_users/:id",
 "endpoints",
 "endpoints/:id",
 "evaluations",
 "evaluations/:id",
 "events/graph(/on/:field(/by/:interval))",
 "cursus/:cursus_id/events",
 "campus/:campus_id/events",
 "campus/:campus_id/cursus/:cursus_id/events",
 "users/:user_id/events",
 "events",
 "events/:id",
 "users/:user_id/events_users",
 "events/:event_id/events_users",
 "events_users",
 "events_users/:id",
 "exams/graph(/on/:field(/by/:interval))",
 "cursus/:cursus_id/exams",
 "campus/:campus_id/exams",
 "campus/:campus_id/cursus/:cursus_id/exams",
 "users/:user_id/exams",
 "projects/:project_id/exams",
 "exams",
 "exams/:id",
 "exams/:exam_id/exams_users",
 "exams/:exam_id/exams_users/:id",
 "experiences",
 "projects_users/:projects_user_id/experiences",
 "users/:user_id/experiences",
 "skills/:skill_id/experiences",
 "partnerships_users/:partnerships_user_id/experiences",
 "experiences/:id",
 "expertises",
 "expertises/:id",
 "expertises/:expertise_id/expertises_users",
 "users/:user_id/expertises_users",
 "expertises_users",
 "expertises_users/:id",
 "events/:event_id/feedbacks",
 "feedbacks",
 "scale_teams/:scale_team_id/feedbacks",
 "events/:event_id/feedbacks/:id",
 "feedbacks/:id",
 "scale_teams/:scale_team_id/feedbacks/:id",
 "flags",
 "flashes/:flash_id/flash_users",
 "flash_users",
 "flashes/:flash_id/flash_users/:id",
 "flash_users/:id",
 "flashes",
 "flashes/:id",
 "users/:user_id/gitlab_users",
 "groups",
 "users/:user_id/groups",
 "groups/:id",
 "groups_users",
 "groups/:group_id/groups_users",
 "users/:user_id/groups_users",
 "groups_users/:id",
 "internships",
 "users/:user_id/internships",
 "internships/:id",
 "users/:user_id/internships/:id",
 "languages/graph(/on/:field(/by/:interval))",
 "languages",
 "languages/:id",
 "languages_users/graph(/on/:field(/by/:interval))",
 "users/:user_id/languages_users",
 "languages_users",
 "users/:user_id/languages_users/:id",
 "languages_users/:id",
 "levels",
 "cursus/:cursus_id/levels",
 "locations/graph(/on/:field(/by/:interval))",
 "locations",
 "users/:user_id/locations",
 "campus/:campus_id/locations",
 "locations/:id",
 "users/:user_id/locations/:id",
 "campus/:campus_id/locations/end_all",
 "mailings",
 "users/:user_id/mailings",
 "mailings/:id",
 "users/:user_id/notes",
 "campus/:campus_id/notes",
 "notes",
 "notes/:id",
 "cursus/:cursus_id/notions",
 "tags/:tag_id/notions",
 "notions",
 "notions/:id",
 "offers",
 "offers/:id",
 "offers/:offer_id/offers_users",
 "users/:user_id/offers_users",
 "offers_users",
 "offers_users/:id",
 "project_sessions_rules/:project_sessions_rule_id/params_project_sessions_rules",
 "params_project_sessions_rules",
 "params_project_sessions_rules/:id",
 "partnerships",
 "partnerships/:id",
 "partnerships/:partnership_id/partnerships_users",
 "partnerships_users",
 "partnerships_users/:id",
 "patronages",
 "users/:user_id/patronages",
 "patronages/:id",
 "patronages_reports/graph(/on/:field(/by/:interval))",
 "patronages_reports",
 "users/:user_id/patronages_reports",
 "patronages/:patronage_id/patronages_reports",
 "reports/:report_id/patronages_reports",
 "patronages_reports/:id",
 "pools",
 "pools/:id",
 "pools/:id/points/add",
 "pools/:id/points/remove",
 "products",
 "campus/:campus_id/products",
 "products/:id",
 "campus/:campus_id/products/:id",
 "project_data",
 "project_sessions/:project_session_id/project_data",
 "project_data/:id",
 "projects/:project_id/project_sessions/graph(/on/:field(/by/:interval))",
 "project_sessions/graph(/on/:field(/by/:interval))",
 "projects/:project_id/project_sessions",
 "project_sessions",
 "project_sessions/:id",
 "project_sessions/:project_session_id/project_sessions_rules",
 "project_sessions_rules",
 "project_sessions_rules/:id",
 "project_sessions_skills",
 "project_sessions/:project_session_id/project_sessions_skills",
 "skills/:skill_id/project_sessions_skills",
 "project_sessions_skills/:id",
 "project_sessions/:project_session_id/project_sessions_skills/:id",
 "cursus/:cursus_id/projects",
 "projects/:project_id/projects",
 "projects",
 "me/projects",
 "projects/:id",
 "projects/:id/retry",
 "projects/:project_id/projects_users/graph(/on/:field(/by/:interval))",
 "users/:user_id/projects_users/graph(/on/:field(/by/:interval))",
 "projects_users/graph(/on/:field(/by/:interval))",
 "projects/:project_id/projects_users",
 "users/:user_id/projects_users",
 "projects_users",
 "projects_users/:id",
 "projects/:project_id/register",
 "projects_users/:id/compile",
 "projects_users/:id/retry",
 "quests",
 "cursus/:cursus_id/quests",
 "campus/:campus_id/quests",
 "users/:user_id/quests",
 "quests/:id",
 "quests_users/graph(/on/:field(/by/:interval))",
 "quests/:quest_id/quests_users",
 "users/:user_id/quests_users",
 "quests_users",
 "quests_users/:id",
 "roles",
 "users/:user_id/roles",
 "roles/:id",
 "roles_entities/graph(/on/:field(/by/:interval))",
 "roles/:role_id/roles_entities",
 "roles_entities",
 "roles_entities/:id",
 "rules",
 "project_sessions/:project_session_id/rules",
 "rules/:id",
 "scale_teams/graph(/on/:field(/by/:interval))",
 "projects/:project_id/scale_teams/graph(/on/:field(/by/:interval))",
 "users/:user_id/scale_teams/graph(/on/:field(/by/:interval))",
 "project_sessions/:project_session_id/scale_teams",
 "scale_teams",
 "projects/:project_id/scale_teams",
 "users/:user_id/scale_teams/as_corrector",
 "users/:user_id/scale_teams/as_corrected",
 "users/:user_id/scale_teams",
 "me/scale_teams/as_corrector",
 "me/scale_teams/as_corrected",
 "me/scale_teams",
 "project_sessions/:project_session_id/scale_teams/:id",
 "scale_teams/:id",
 "scale_teams/multiple_create",
 "project_sessions/:project_session_id/scales",
 "scales",
 "projects/:project_id/scales",
 "users/:user_id/scales",
 "scales/:id",
 "scores",
 "coalitions/:coalition_id/scores",
 "coalitions_users/:coalitions_user_id/scores",
 "blocs/:bloc_id/scores",
 "scores/:id",
 "coalitions/:coalition_id/scores/:id",
 "coalitions_users/:coalitions_user_id/scores/:id",
 "blocs/:bloc_id/scores/:id",
 "skills",
 "cursus/:cursus_id/skills",
 "skills/:id",
 "slots/graph(/on/:field(/by/:interval))",
 "projects/:project_id/slots/graph(/on/:field(/by/:interval))",
 "users/:user_id/slots/graph(/on/:field(/by/:interval))",
 "slots",
 "projects/:project_id/slots",
 "users/:user_id/slots",
 "me/slots",
 "slots/:id",
 "blocs/:bloc_id/squads",
 "blocs/:bloc_id/squads/:id",
 "blocs/:bloc_id/squads_users",
 "blocs/:bloc_id/squads_users/:id",
 "notions/:notion_id/subnotions",
 "subnotions",
 "subnotions/:id",
 "projects/:project_id/tags",
 "issues/:issue_id/tags",
 "notions/:notion_id/tags",
 "cursus/:cursus_id/tags",
 "users/:user_id/tags",
 "tags",
 "tags/:id",
 "tags_users",
 "users/:user_id/tags_users",
 "cursus/:cursus_id/tags_users",
 "campus/:campus_id/tags_users",
 "tags/:tag_id/tags_users",
 "tags_users/:id",
 "cursus/:cursus_id/teams/graph(/on/:field(/by/:interval))",
 "users/:user_id/teams/graph(/on/:field(/by/:interval))",
 "users/:user_id/projects/:project_id/teams/graph(/on/:field(/by/:interval))",
 "teams/graph(/on/:field(/by/:interval))",
 "projects/:project_id/teams/graph(/on/:field(/by/:interval))",
 "cursus/:cursus_id/teams",
 "users/:user_id/teams",
 "users/:user_id/projects/:project_id/teams",
 "teams",
 "projects/:project_id/teams",
 "project_sessions/:project_session_id/teams",
 "me/teams",
 "teams/:id",
 "teams/:id/reset_team_uploads",
 "teams/:team_id/teams_uploads",
 "teams_uploads",
 "teams_uploads/:id",
 "teams_uploads/multiple_create",
 "teams_users",
 "users/:user_id/teams_users",
 "teams/:team_id/teams_users",
 "teams_users/:id",
 "titles",
 "users/:user_id/titles",
 "titles/:id",
 "titles/:title_id/titles_users",
 "users/:user_id/titles_users",
 "titles_users",
 "titles_users/:id",
 "transactions",
 "users/:user_id/transactions",
 "transactions/:id",
 "translations",
 "translations/:id",
 "translations/upload",
 "user_candidatures",
 "users/:user_id/user_candidature",
 "user_candidatures/:id",
 "users/graph(/on/:field(/by/:interval))",
 "users/:id/correction_points/add",
 "users/:id/correction_points/remove",
 "users/:id/locations_stats",
 "users/:id/exam",
 "coalitions/:coalition_id/users",
 "dashes/:dash_id/users",
 "events/:event_id/users",
 "accreditations/:accreditation_id/users",
 "teams/:team_id/users",
 "projects/:project_id/users",
 "partnerships/:partnership_id/users",
 "expertises/:expertise_id/users",
 "users",
 "cursus/:cursus_id/users",
 "achievements/:achievement_id/users",
 "titles/:title_id/users",
 "quests/:quest_id/users",
 "groups/:group_id/users",
 "users/:id",
 "me",
 "users/:user_id/free_past_agu",
 "users/:user_id/unfreeze",
 "staff",
 "waitlists",
 "events/:event_id/waitlist",
 "exams/:exam_id/waitlist",
 "waitlists/:id"};

std::string compare(char *input, char *ref)
{
	int i = 0;
	int j = 0;
	std::string ret;

	while (input[i] && ref[j])
	{
		if ((!(input[i] >= 'a' && input[i] <= 'z') && input[i] != '/' && input[i] != '_'))
			return ("");
		if(ref[j] == ':')
		{
			while ((input[i] >= 'a' && input[i] <= 'z') || input[i] == '_')
			{
				ret.push_back(input[i]);
				i++;
			}
			j++;
			while ((ref[j] >= 'a' && ref[j] <= 'z') || ref[j] == '_')
				j++;
		}
		else if (input[i] != ref[j])
			return ("");
		else
		{
			ret.push_back(input[i]);
			i++;
			j++;
		}
	}
	if (ref[j])
	{
		if (ref[j] == '/')
		{
			ret.push_back('/');
			j++;
		}
		if (ref[j] == ':')
			return ("");
		while(ref[j] && ref[j] != '/')
		{
			if (ref[j] == '(')
				return ("");
			ret.push_back(ref[j]);
			j++;
		}
		return (ret);
	}
	return ("");

}

int main(int argc, char **argv) {
	if (argc != 2)
		return (1);
	std::set<std::string> ret;
	std::string tmp;
	for (auto & i : array)
		if (!(tmp = compare(argv[1], i)).empty())
			ret.insert(tmp);
	for (const auto & i : ret)
		std::cout << i << " ";
	return 0;
}
